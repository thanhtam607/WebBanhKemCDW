{"ast":null,"code":"import{logger}from\"redux-logger\";import thunkMiddleware from\"redux-thunk\";import{routerMiddleware}from'connected-react-router';import{createBrowserHistory}from'history';import{createStore,applyMiddleware,compose}from'redux';import{createStateSyncMiddleware}from'redux-state-sync';import{persistStore}from'redux-persist';import createRootReducer from'./store/reducers/rootReducer';import actionTypes from'./store/actions/actionTypes';var environment=process.env.NODE_ENV||\"development\";var isDevelopment=environment===\"development\";//hide redux logs\nisDevelopment=false;export var history=createBrowserHistory({basename:process.env.REACT_APP_ROUTER_BASE_NAME});var reduxStateSyncConfig={whitelist:[actionTypes.APP_START_UP_COMPLETE]};var rootReducer=createRootReducer(history);var middleware=[routerMiddleware(history),thunkMiddleware,createStateSyncMiddleware(reduxStateSyncConfig)];if(isDevelopment)middleware.push(logger);var composeEnhancers=isDevelopment&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:compose;var reduxStore=createStore(rootReducer,composeEnhancers(applyMiddleware.apply(void 0,middleware)));export var dispatch=reduxStore.dispatch;export var persistor=persistStore(reduxStore);export default reduxStore;","map":{"version":3,"sources":["D:/Documents/Frontend-React.JS/src/redux.js"],"names":["logger","thunkMiddleware","routerMiddleware","createBrowserHistory","createStore","applyMiddleware","compose","createStateSyncMiddleware","persistStore","createRootReducer","actionTypes","environment","process","env","NODE_ENV","isDevelopment","history","basename","REACT_APP_ROUTER_BASE_NAME","reduxStateSyncConfig","whitelist","APP_START_UP_COMPLETE","rootReducer","middleware","push","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reduxStore","dispatch","persistor"],"mappings":"AAAA,OAASA,MAAT,KAAuB,cAAvB,CACA,MAAOC,CAAAA,eAAP,KAA4B,aAA5B,CACA,OAASC,gBAAT,KAAiC,wBAAjC,CACA,OAASC,oBAAT,KAAqC,SAArC,CAEA,OAASC,WAAT,CAAsBC,eAAtB,CAAuCC,OAAvC,KAAsD,OAAtD,CACA,OAASC,yBAAT,KAA0C,kBAA1C,CACA,OAASC,YAAT,KAA6B,eAA7B,CAEA,MAAOC,CAAAA,iBAAP,KAA8B,8BAA9B,CACA,MAAOC,CAAAA,WAAP,KAAwB,6BAAxB,CAEA,GAAMC,CAAAA,WAAW,CAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAAwB,aAA5C,CACA,GAAIC,CAAAA,aAAa,CAAGJ,WAAW,GAAK,aAApC,CAEA;AACAI,aAAa,CAAG,KAAhB,CAGA,MAAO,IAAMC,CAAAA,OAAO,CAAGb,oBAAoB,CAAC,CAAEc,QAAQ,CAAEL,OAAO,CAACC,GAAR,CAAYK,0BAAxB,CAAD,CAApC,CAEP,GAAMC,CAAAA,oBAAoB,CAAG,CACzBC,SAAS,CAAE,CACPV,WAAW,CAACW,qBADL,CADc,CAA7B,CAMA,GAAMC,CAAAA,WAAW,CAAGb,iBAAiB,CAACO,OAAD,CAArC,CACA,GAAMO,CAAAA,UAAU,CAAG,CACfrB,gBAAgB,CAACc,OAAD,CADD,CAEff,eAFe,CAGfM,yBAAyB,CAACY,oBAAD,CAHV,CAAnB,CAKA,GAAIJ,aAAJ,CAAmBQ,UAAU,CAACC,IAAX,CAAgBxB,MAAhB,EAEnB,GAAMyB,CAAAA,gBAAgB,CAAIV,aAAa,EAAIW,MAAM,CAACC,oCAAzB,CAAiED,MAAM,CAACC,oCAAxE,CAA+GrB,OAAxI,CAEA,GAAMsB,CAAAA,UAAU,CAAGxB,WAAW,CAC1BkB,WAD0B,CAE1BG,gBAAgB,CAACpB,eAAe,MAAf,QAAmBkB,UAAnB,CAAD,CAFU,CAA9B,CAKA,MAAO,IAAMM,CAAAA,QAAQ,CAAGD,UAAU,CAACC,QAA5B,CAEP,MAAO,IAAMC,CAAAA,SAAS,CAAGtB,YAAY,CAACoB,UAAD,CAA9B,CAEP,cAAeA,CAAAA,UAAf","sourcesContent":["import { logger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createStateSyncMiddleware } from 'redux-state-sync';\nimport { persistStore } from 'redux-persist';\n\nimport createRootReducer from './store/reducers/rootReducer';\nimport actionTypes from './store/actions/actionTypes';\n\nconst environment = process.env.NODE_ENV || \"development\";\nlet isDevelopment = environment === \"development\";\n\n//hide redux logs\nisDevelopment = false;\n\n\nexport const history = createBrowserHistory({ basename: process.env.REACT_APP_ROUTER_BASE_NAME });\n\nconst reduxStateSyncConfig = {\n    whitelist: [\n        actionTypes.APP_START_UP_COMPLETE,\n    ]\n}\n\nconst rootReducer = createRootReducer(history);\nconst middleware = [\n    routerMiddleware(history),\n    thunkMiddleware,\n    createStateSyncMiddleware(reduxStateSyncConfig),\n]\nif (isDevelopment) middleware.push(logger);\n\nconst composeEnhancers = (isDevelopment && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\n\nconst reduxStore = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(...middleware)),\n)\n\nexport const dispatch = reduxStore.dispatch;\n\nexport const persistor = persistStore(reduxStore);\n\nexport default reduxStore;"]},"metadata":{},"sourceType":"module"}