{"ast":null,"code":"import locationHelperBuilder from\"redux-auth-wrapper/history4/locationHelper\";import{connectedRouterRedirect}from\"redux-auth-wrapper/history4/redirect\";var locationHelper=locationHelperBuilder({});export var userIsAuthenticated=connectedRouterRedirect({authenticatedSelector:function authenticatedSelector(state){return state.admin.isLoggedIn;},wrapperDisplayName:'UserIsAuthenticated',redirectPath:'/login'});export var userIsNotAuthenticated=connectedRouterRedirect({// Want to redirect the user when they are authenticated\nauthenticatedSelector:function authenticatedSelector(state){return!state.admin.isLoggedIn;},wrapperDisplayName:'UserIsNotAuthenticated',redirectPath:function redirectPath(state,ownProps){return locationHelper.getRedirectQueryParam(ownProps)||'/';},allowRedirectBack:false});","map":{"version":3,"sources":["D:/Documents/Frontend-React.JS/src/hoc/authentication.js"],"names":["locationHelperBuilder","connectedRouterRedirect","locationHelper","userIsAuthenticated","authenticatedSelector","state","admin","isLoggedIn","wrapperDisplayName","redirectPath","userIsNotAuthenticated","ownProps","getRedirectQueryParam","allowRedirectBack"],"mappings":"AAAA,MAAOA,CAAAA,qBAAP,KAAkC,4CAAlC,CACA,OAASC,uBAAT,KAAwC,sCAAxC,CAEA,GAAMC,CAAAA,cAAc,CAAGF,qBAAqB,CAAC,EAAD,CAA5C,CAEA,MAAO,IAAMG,CAAAA,mBAAmB,CAAGF,uBAAuB,CAAC,CACvDG,qBAAqB,CAAE,+BAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,KAAN,CAAYC,UAAhB,EAD2B,CAEvDC,kBAAkB,CAAE,qBAFmC,CAGvDC,YAAY,CAAE,QAHyC,CAAD,CAAnD,CAMP,MAAO,IAAMC,CAAAA,sBAAsB,CAAGT,uBAAuB,CAAC,CAC1D;AACAG,qBAAqB,CAAE,+BAAAC,KAAK,QAAI,CAACA,KAAK,CAACC,KAAN,CAAYC,UAAjB,EAF8B,CAG1DC,kBAAkB,CAAE,wBAHsC,CAI1DC,YAAY,CAAE,sBAACJ,KAAD,CAAQM,QAAR,QAAqBT,CAAAA,cAAc,CAACU,qBAAf,CAAqCD,QAArC,GAAkD,GAAvE,EAJ4C,CAK1DE,iBAAiB,CAAE,KALuC,CAAD,CAAtD","sourcesContent":["import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\n\nconst locationHelper = locationHelperBuilder({});\n\nexport const userIsAuthenticated = connectedRouterRedirect({\n    authenticatedSelector: state => state.admin.isLoggedIn,\n    wrapperDisplayName: 'UserIsAuthenticated',\n    redirectPath: '/login'\n});\n\nexport const userIsNotAuthenticated = connectedRouterRedirect({\n    // Want to redirect the user when they are authenticated\n    authenticatedSelector: state => !state.admin.isLoggedIn,\n    wrapperDisplayName: 'UserIsNotAuthenticated',\n    redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || '/',\n    allowRedirectBack: false\n});"]},"metadata":{},"sourceType":"module"}